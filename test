import Plugin from '@ckeditor/ckeditor5-core/src/plugin';
import ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';
import { toWidget, toWidgetEditable } from '@ckeditor/ckeditor5-widget/src/utils';
import Widget from '@ckeditor/ckeditor5-widget/src/widget';

class InsertDetailsCommand extends Plugin {
    init() {
        const editor = this.editor;

        editor.commands.add('insertDetails', {
            execute() {
                const detailsHtml = `
                    <details>
                        <summary>I have keys but no doors. I have space but no room. You can enter but canâ€™t leave. What am I?</summary>
                        A keyboard.
                    </details>
                `;

                editor.model.change(writer => {
                    const viewFragment = editor.data.processor.toView(detailsHtml);
                    const modelFragment = editor.data.toModel(viewFragment);
                    editor.model.insertContent(modelFragment);
                });
            }
        });
    }
}

class DetailsPlugin extends Plugin {
    static get requires() {
        return [ InsertDetailsCommand, Widget ];
    }

    init() {
        const editor = this.editor;

        // Define the schema
        editor.model.schema.register('details', {
            isObject: true,
            allowWhere: '$block',
            allowContentOf: '$root'
        });

        editor.model.schema.register('summary', {
            isLimit: true,
            allowIn: 'details',
            allowContentOf: '$block'
        });

        editor.conversion.for('upcast').elementToElement({
            model: 'details',
            view: 'details'
        });

        editor.conversion.for('dataDowncast').elementToElement({
            model: 'details',
            view: 'details'
        });

        editor.conversion.for('editingDowncast').elementToElement({
            model: 'details',
            view: (modelItem, viewWriter) => {
                const detailsElement = viewWriter.createContainerElement('details');
                return toWidget(detailsElement, viewWriter, { label: 'details widget' });
            }
        });

        editor.conversion.for('upcast').elementToElement({
            model: 'summary',
            view: 'summary'
        });

        editor.conversion.for('dataDowncast').elementToElement({
            model: 'summary',
            view: 'summary'
        });

        editor.conversion.for('editingDowncast').elementToElement({
            model: 'summary',
            view: (modelItem, viewWriter) => {
                const summaryElement = viewWriter.createEditableElement('summary');
                return toWidgetEditable(summaryElement, viewWriter);
            }
        });

        // Adding the button to the toolbar
        editor.ui.componentFactory.add('insertDetails', locale => {
            const view = new ButtonView(locale);

            view.set({
                label: 'Insert Details',
                withText: true,
                tooltip: true
            });

            // Execute the command when the button is clicked
            view.on('execute', () => {
                editor.execute('insertDetails');
            });

            return view;
        });

        // Add keyboard handling for Enter key
        editor.editing.view.document.on('enter', (evt, data) => {
            const positionParent = editor.model.document.selection.getFirstPosition().parent;

            if (positionParent.is('element', 'summary')) {
                const paragraph = editor.model.change(writer => writer.createElement('paragraph'));
                editor.model.insertContent(paragraph, editor.model.document.selection.getLastPosition());
                evt.stop();
                editor.model.change(writer => writer.setSelection(paragraph, 'in'));
                data.preventDefault();
            }
        }, { priority: 'high' });
    }
}

export default DetailsPlugin;
